//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAmendments
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StorageSpaceEntities : DbContext
    {
        public StorageSpaceEntities()
            : base("name=StorageSpaceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivityLocation> ActivityLocations { get; set; }
        public virtual DbSet<ActionType> ActionTypes { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Party> Parties { get; set; }
        public virtual DbSet<Parties_CustomActions> Parties_CustomActions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Users_Groups> Users_Groups { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<ActivityFlow> ActivityFlows { get; set; }
        public virtual DbSet<ApproveFlowConfig> ApproveFlowConfigs { get; set; }
        public virtual DbSet<ApproveFlowConfigValidFuelUser> ApproveFlowConfigValidFuelUsers { get; set; }
        public virtual DbSet<AsgnSegmentTypeVoucherSetingDetail> AsgnSegmentTypeVoucherSetingDetails { get; set; }
        public virtual DbSet<AsgnVoucherAcont> AsgnVoucherAconts { get; set; }
        public virtual DbSet<Attachment> Attachments { get; set; }
        public virtual DbSet<Charter> Charters { get; set; }
        public virtual DbSet<CharterItem> CharterItems { get; set; }
        public virtual DbSet<CharterItemHistory> CharterItemHistories { get; set; }
        public virtual DbSet<EffectiveFactor> EffectiveFactors { get; set; }
        public virtual DbSet<FreeAccount> FreeAccounts { get; set; }
        public virtual DbSet<FuelReport> FuelReports { get; set; }
        public virtual DbSet<FuelReportDetail> FuelReportDetails { get; set; }
        public virtual DbSet<InventoryOperation> InventoryOperations { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceAdditionalPrice> InvoiceAdditionalPrices { get; set; }
        public virtual DbSet<InvoiceItem> InvoiceItems { get; set; }
        public virtual DbSet<JournalEntry> JournalEntries { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Offhire> Offhires { get; set; }
        public virtual DbSet<OffhireDetail> OffhireDetails { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderItemBalance> OrderItemBalances { get; set; }
        public virtual DbSet<OrderItem> OrderItems { get; set; }
        public virtual DbSet<Scrap> Scraps { get; set; }
        public virtual DbSet<ScrapDetail> ScrapDetails { get; set; }
        public virtual DbSet<Segment> Segments { get; set; }
        public virtual DbSet<UserInCompany> UserInCompanies { get; set; }
        public virtual DbSet<Vessel> Vessels { get; set; }
        public virtual DbSet<VesselInCompany> VesselInCompanies { get; set; }
        public virtual DbSet<VoucherLog> VoucherLogs { get; set; }
        public virtual DbSet<Voucher> Vouchers { get; set; }
        public virtual DbSet<VoucherSetingDetail> VoucherSetingDetails { get; set; }
        public virtual DbSet<VoucherSeting> VoucherSetings { get; set; }
        public virtual DbSet<Voyage> Voyages { get; set; }
        public virtual DbSet<VoyageLog> VoyageLogs { get; set; }
        public virtual DbSet<Workflow> Workflows { get; set; }
        public virtual DbSet<WorkflowLog> WorkflowLogs { get; set; }
        public virtual DbSet<WorkflowStep> WorkflowSteps { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<ErrorMessage> ErrorMessages { get; set; }
        public virtual DbSet<FinancialYear> FinancialYears { get; set; }
        public virtual DbSet<Good> Goods { get; set; }
        public virtual DbSet<InventoryUser> InventoryUsers { get; set; }
        public virtual DbSet<OperationReference> OperationReferences { get; set; }
        public virtual DbSet<StoreType> StoreTypes { get; set; }
        public virtual DbSet<TimeBucket> TimeBuckets { get; set; }
        public virtual DbSet<TransactionItemPrice> TransactionItemPrices { get; set; }
        public virtual DbSet<TransactionItem> TransactionItems { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<UnitConvert> UnitConverts { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<Warehouse> Warehouses { get; set; }
        public virtual DbSet<OffhireFuelTypeFuelGoodCode> OffhireFuelTypeFuelGoodCodes { get; set; }
        public virtual DbSet<OffhireMeasureTypeFuelMeasureCode> OffhireMeasureTypeFuelMeasureCodes { get; set; }
        public virtual DbSet<FuelReportCommandLog> FuelReportCommandLogs { get; set; }
        public virtual DbSet<FuelReportCommandLogDetail> FuelReportCommandLogDetails { get; set; }
        public virtual DbSet<VersionInfo> VersionInfoes { get; set; }
        public virtual DbSet<CharterIn> CharterIns { get; set; }
        public virtual DbSet<CharterOut> CharterOuts { get; set; }
        public virtual DbSet<EventLog> EventLogs { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public virtual DbSet<WorkflowLog_Old> WorkflowLog_Old { get; set; }
        public virtual DbSet<C__VoyagesView> C__VoyagesView { get; set; }
        public virtual DbSet<AccountListView> AccountListViews { get; set; }
        public virtual DbSet<CompanyGoodUnitView> CompanyGoodUnitViews { get; set; }
        public virtual DbSet<CompanyGoodView> CompanyGoodViews { get; set; }
        public virtual DbSet<CompanyVesselTankView> CompanyVesselTankViews { get; set; }
        public virtual DbSet<CompanyVesselView> CompanyVesselViews { get; set; }
        public virtual DbSet<CompanyView> CompanyViews { get; set; }
        public virtual DbSet<CurrencyView> CurrencyViews { get; set; }
        public virtual DbSet<SharedGoodView> SharedGoodViews { get; set; }
        public virtual DbSet<UnitView> UnitViews { get; set; }
        public virtual DbSet<UserView> UserViews { get; set; }
        public virtual DbSet<VoyagesView> VoyagesViews { get; set; }
        public virtual DbSet<HAFEZAccountListView> HAFEZAccountListViews { get; set; }
        public virtual DbSet<HAFEZVoyagesView> HAFEZVoyagesViews { get; set; }
        public virtual DbSet<HAFIZAccountListView> HAFIZAccountListViews { get; set; }
        public virtual DbSet<HAFIZVoyagesView> HAFIZVoyagesViews { get; set; }
        public virtual DbSet<SAPIDAccountListView> SAPIDAccountListViews { get; set; }
        public virtual DbSet<SAPIDVoyagesView> SAPIDVoyagesViews { get; set; }
        public virtual DbSet<EOVReportsView> EOVReportsViews { get; set; }
        public virtual DbSet<VoucherReportView> VoucherReportViews { get; set; }
        public virtual DbSet<Users1> Users1 { get; set; }
        public virtual DbSet<VesselEventReportsView> VesselEventReportsViews { get; set; }
    
        [DbFunction("StorageSpaceEntities", "PrimaryCoefficient")]
        public virtual IQueryable<PrimaryCoefficient_Result> PrimaryCoefficient(Nullable<long> originalUnitId, Nullable<long> subsidiaryUnitId, Nullable<System.DateTime> effectiveDate)
        {
            var originalUnitIdParameter = originalUnitId.HasValue ?
                new ObjectParameter("OriginalUnitId", originalUnitId) :
                new ObjectParameter("OriginalUnitId", typeof(long));
    
            var subsidiaryUnitIdParameter = subsidiaryUnitId.HasValue ?
                new ObjectParameter("SubsidiaryUnitId", subsidiaryUnitId) :
                new ObjectParameter("SubsidiaryUnitId", typeof(long));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PrimaryCoefficient_Result>("[StorageSpaceEntities].[PrimaryCoefficient](@OriginalUnitId, @SubsidiaryUnitId, @EffectiveDate)", originalUnitIdParameter, subsidiaryUnitIdParameter, effectiveDateParameter);
        }
    
        public virtual ObjectResult<GetFuelOriginalData_Result> GetFuelOriginalData(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFuelOriginalData_Result>("GetFuelOriginalData", codeParameter);
        }
    
        public virtual ObjectResult<GetVesselReportData_Result> GetVesselReportData(string shipCode, string voyageNo, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<double> portTime, Nullable<double> portTimeMOL, string locationType)
        {
            var shipCodeParameter = shipCode != null ?
                new ObjectParameter("ShipCode", shipCode) :
                new ObjectParameter("ShipCode", typeof(string));
    
            var voyageNoParameter = voyageNo != null ?
                new ObjectParameter("VoyageNo", voyageNo) :
                new ObjectParameter("VoyageNo", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var portTimeParameter = portTime.HasValue ?
                new ObjectParameter("PortTime", portTime) :
                new ObjectParameter("PortTime", typeof(double));
    
            var portTimeMOLParameter = portTimeMOL.HasValue ?
                new ObjectParameter("PortTimeMOL", portTimeMOL) :
                new ObjectParameter("PortTimeMOL", typeof(double));
    
            var locationTypeParameter = locationType != null ?
                new ObjectParameter("LocationType", locationType) :
                new ObjectParameter("LocationType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVesselReportData_Result>("GetVesselReportData", shipCodeParameter, voyageNoParameter, fromDateParameter, toDateParameter, portTimeParameter, portTimeMOLParameter, locationTypeParameter);
        }
    
        public virtual ObjectResult<GetVesselReportShipNameData_Result> GetVesselReportShipNameData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVesselReportShipNameData_Result>("GetVesselReportShipNameData");
        }
    
        public virtual ObjectResult<GetVesselReportVoyageData_Result> GetVesselReportVoyageData(string shipCode)
        {
            var shipCodeParameter = shipCode != null ?
                new ObjectParameter("ShipCode", shipCode) :
                new ObjectParameter("ShipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVesselReportVoyageData_Result>("GetVesselReportVoyageData", shipCodeParameter);
        }
    
        public virtual ObjectResult<PeriodicalFuelStatistics_Result> PeriodicalFuelStatistics(Nullable<long> companyId, Nullable<long> warehouseId, Nullable<long> quantityUnitId, Nullable<long> goodId, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(long));
    
            var quantityUnitIdParameter = quantityUnitId.HasValue ?
                new ObjectParameter("QuantityUnitId", quantityUnitId) :
                new ObjectParameter("QuantityUnitId", typeof(long));
    
            var goodIdParameter = goodId.HasValue ?
                new ObjectParameter("GoodId", goodId) :
                new ObjectParameter("GoodId", typeof(long));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PeriodicalFuelStatistics_Result>("PeriodicalFuelStatistics", companyIdParameter, warehouseIdParameter, quantityUnitIdParameter, goodIdParameter, fromParameter, toParameter);
        }
    
        public virtual int ActivateWarehouseIncludingRecieptsOperation(string description, Nullable<long> warehouseId, Nullable<int> timeBucketId, Nullable<int> storeTypesId, Nullable<System.DateTime> registrationDate, string referenceType, string referenceNo, Nullable<int> userCreatorId)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(long));
    
            var timeBucketIdParameter = timeBucketId.HasValue ?
                new ObjectParameter("TimeBucketId", timeBucketId) :
                new ObjectParameter("TimeBucketId", typeof(int));
    
            var storeTypesIdParameter = storeTypesId.HasValue ?
                new ObjectParameter("StoreTypesId", storeTypesId) :
                new ObjectParameter("StoreTypesId", typeof(int));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("RegistrationDate", registrationDate) :
                new ObjectParameter("RegistrationDate", typeof(System.DateTime));
    
            var referenceTypeParameter = referenceType != null ?
                new ObjectParameter("ReferenceType", referenceType) :
                new ObjectParameter("ReferenceType", typeof(string));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var userCreatorIdParameter = userCreatorId.HasValue ?
                new ObjectParameter("UserCreatorId", userCreatorId) :
                new ObjectParameter("UserCreatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActivateWarehouseIncludingRecieptsOperation", descriptionParameter, warehouseIdParameter, timeBucketIdParameter, storeTypesIdParameter, registrationDateParameter, referenceTypeParameter, referenceNoParameter, userCreatorIdParameter);
        }
    
        public virtual ObjectResult<Cardex_Result> Cardex(Nullable<long> warehouseId, Nullable<long> goodId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(long));
    
            var goodIdParameter = goodId.HasValue ?
                new ObjectParameter("GoodId", goodId) :
                new ObjectParameter("GoodId", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Cardex_Result>("Cardex", warehouseIdParameter, goodIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int ChangeCoefficientAndUpdatePriceByUnitConvertId(Nullable<int> unitConvertId, ObjectParameter message)
        {
            var unitConvertIdParameter = unitConvertId.HasValue ?
                new ObjectParameter("UnitConvertId", unitConvertId) :
                new ObjectParameter("UnitConvertId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeCoefficientAndUpdatePriceByUnitConvertId", unitConvertIdParameter, message);
        }
    
        public virtual ObjectResult<string> ChangeWarehouseStatus(Nullable<bool> isActive, Nullable<long> warehouseId, Nullable<int> userCreatorId)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(long));
    
            var userCreatorIdParameter = userCreatorId.HasValue ?
                new ObjectParameter("UserCreatorId", userCreatorId) :
                new ObjectParameter("UserCreatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ChangeWarehouseStatus", isActiveParameter, warehouseIdParameter, userCreatorIdParameter);
        }
    
        public virtual int ErrorHandling()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ErrorHandling");
        }
    
        public virtual ObjectResult<Nullable<bool>> IsValidTransactionCode(Nullable<byte> action, Nullable<decimal> code, Nullable<long> warehouseId, Nullable<System.DateTime> registrationDate, Nullable<int> timeBucketId)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(byte));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(decimal));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(long));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("RegistrationDate", registrationDate) :
                new ObjectParameter("RegistrationDate", typeof(System.DateTime));
    
            var timeBucketIdParameter = timeBucketId.HasValue ?
                new ObjectParameter("TimeBucketId", timeBucketId) :
                new ObjectParameter("TimeBucketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("IsValidTransactionCode", actionParameter, codeParameter, warehouseIdParameter, registrationDateParameter, timeBucketIdParameter);
        }
    
        public virtual int PriceAllSuspendedIssuedItems(Nullable<long> companyId, Nullable<long> warehouseId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userCreatorId, ObjectParameter transactionItemPriceIds, ObjectParameter message)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userCreatorIdParameter = userCreatorId.HasValue ?
                new ObjectParameter("UserCreatorId", userCreatorId) :
                new ObjectParameter("UserCreatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PriceAllSuspendedIssuedItems", companyIdParameter, warehouseIdParameter, fromDateParameter, toDateParameter, userCreatorIdParameter, transactionItemPriceIds, message);
        }
    
        public virtual int PriceAllSuspendedTransactionItemsUsingReference(Nullable<long> companyId, Nullable<long> warehouseId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userCreatorId, Nullable<byte> action, ObjectParameter transactionItemPriceIds, ObjectParameter message)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userCreatorIdParameter = userCreatorId.HasValue ?
                new ObjectParameter("UserCreatorId", userCreatorId) :
                new ObjectParameter("UserCreatorId", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PriceAllSuspendedTransactionItemsUsingReference", companyIdParameter, warehouseIdParameter, fromDateParameter, toDateParameter, userCreatorIdParameter, actionParameter, transactionItemPriceIds, message);
        }
    
        public virtual int PriceGivenIssuedItems(Nullable<int> userCreatorId, ObjectParameter transactionItemPriceIds, ObjectParameter message, ObjectParameter notPricedTransactionId)
        {
            var userCreatorIdParameter = userCreatorId.HasValue ?
                new ObjectParameter("UserCreatorId", userCreatorId) :
                new ObjectParameter("UserCreatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PriceGivenIssuedItems", userCreatorIdParameter, transactionItemPriceIds, message, notPricedTransactionId);
        }
    
        public virtual int PriceSuspendedTransactionUsingReference(Nullable<int> transactionId, string description, Nullable<int> userCreatorId, ObjectParameter transactionItemPriceIds, ObjectParameter message)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userCreatorIdParameter = userCreatorId.HasValue ?
                new ObjectParameter("UserCreatorId", userCreatorId) :
                new ObjectParameter("UserCreatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PriceSuspendedTransactionUsingReference", transactionIdParameter, descriptionParameter, userCreatorIdParameter, transactionItemPriceIds, message);
        }
    
        public virtual int RemoveTransactionItemPrices(Nullable<int> transactionItemId, Nullable<int> userId, ObjectParameter message)
        {
            var transactionItemIdParameter = transactionItemId.HasValue ?
                new ObjectParameter("TransactionItemId", transactionItemId) :
                new ObjectParameter("TransactionItemId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveTransactionItemPrices", transactionItemIdParameter, userIdParameter, message);
        }
    
        public virtual ObjectResult<TransactionItemPricesGetAll_Result> TransactionItemPricesGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionItemPricesGetAll_Result>("TransactionItemPricesGetAll");
        }
    
        public virtual int TransactionItemPricesOperation(string action, Nullable<int> userCreatorId, ObjectParameter transactionItemPriceIds, ObjectParameter message)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userCreatorIdParameter = userCreatorId.HasValue ?
                new ObjectParameter("UserCreatorId", userCreatorId) :
                new ObjectParameter("UserCreatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransactionItemPricesOperation", actionParameter, userCreatorIdParameter, transactionItemPriceIds, message);
        }
    
        public virtual ObjectResult<TransactionItemsGetAll_Result> TransactionItemsGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionItemsGetAll_Result>("TransactionItemsGetAll");
        }
    
        public virtual int TransactionItemsOperation(string action, Nullable<int> transactionId, Nullable<int> userCreatorId, ObjectParameter transactionItemsId, ObjectParameter message)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var userCreatorIdParameter = userCreatorId.HasValue ?
                new ObjectParameter("UserCreatorId", userCreatorId) :
                new ObjectParameter("UserCreatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransactionItemsOperation", actionParameter, transactionIdParameter, userCreatorIdParameter, transactionItemsId, message);
        }
    
        public virtual int TransactionOperation(string action, Nullable<int> id, Nullable<byte> transactionAction, string description, Nullable<long> companyId, Nullable<long> warehouseId, Nullable<int> timeBucketId, Nullable<int> storeTypesId, Nullable<int> pricingReferenceId, Nullable<byte> status, Nullable<System.DateTime> registrationDate, string referenceType, string referenceNo, Nullable<int> userCreatorId, ObjectParameter transactionId, ObjectParameter code, ObjectParameter message)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var transactionActionParameter = transactionAction.HasValue ?
                new ObjectParameter("TransactionAction", transactionAction) :
                new ObjectParameter("TransactionAction", typeof(byte));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(long));
    
            var timeBucketIdParameter = timeBucketId.HasValue ?
                new ObjectParameter("TimeBucketId", timeBucketId) :
                new ObjectParameter("TimeBucketId", typeof(int));
    
            var storeTypesIdParameter = storeTypesId.HasValue ?
                new ObjectParameter("StoreTypesId", storeTypesId) :
                new ObjectParameter("StoreTypesId", typeof(int));
    
            var pricingReferenceIdParameter = pricingReferenceId.HasValue ?
                new ObjectParameter("PricingReferenceId", pricingReferenceId) :
                new ObjectParameter("PricingReferenceId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("RegistrationDate", registrationDate) :
                new ObjectParameter("RegistrationDate", typeof(System.DateTime));
    
            var referenceTypeParameter = referenceType != null ?
                new ObjectParameter("ReferenceType", referenceType) :
                new ObjectParameter("ReferenceType", typeof(string));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var userCreatorIdParameter = userCreatorId.HasValue ?
                new ObjectParameter("UserCreatorId", userCreatorId) :
                new ObjectParameter("UserCreatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransactionOperation", actionParameter, idParameter, transactionActionParameter, descriptionParameter, companyIdParameter, warehouseIdParameter, timeBucketIdParameter, storeTypesIdParameter, pricingReferenceIdParameter, statusParameter, registrationDateParameter, referenceTypeParameter, referenceNoParameter, userCreatorIdParameter, transactionId, code, message);
        }
    
        public virtual ObjectResult<TransactionsGetAll_Result> TransactionsGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionsGetAll_Result>("TransactionsGetAll");
        }
    
        public virtual ObjectResult<string> UnitConvertsOperation(string action, Nullable<int> id, Nullable<long> unitId, Nullable<long> subUnitId, Nullable<decimal> coefficient, Nullable<int> fiscal_Year_ID, Nullable<System.DateTime> effectiveDateStart, Nullable<System.DateTime> effectiveDateEnd, Nullable<int> userCreatorId, ObjectParameter message)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var subUnitIdParameter = subUnitId.HasValue ?
                new ObjectParameter("SubUnitId", subUnitId) :
                new ObjectParameter("SubUnitId", typeof(long));
    
            var coefficientParameter = coefficient.HasValue ?
                new ObjectParameter("Coefficient", coefficient) :
                new ObjectParameter("Coefficient", typeof(decimal));
    
            var fiscal_Year_IDParameter = fiscal_Year_ID.HasValue ?
                new ObjectParameter("Fiscal_Year_ID", fiscal_Year_ID) :
                new ObjectParameter("Fiscal_Year_ID", typeof(int));
    
            var effectiveDateStartParameter = effectiveDateStart.HasValue ?
                new ObjectParameter("EffectiveDateStart", effectiveDateStart) :
                new ObjectParameter("EffectiveDateStart", typeof(System.DateTime));
    
            var effectiveDateEndParameter = effectiveDateEnd.HasValue ?
                new ObjectParameter("EffectiveDateEnd", effectiveDateEnd) :
                new ObjectParameter("EffectiveDateEnd", typeof(System.DateTime));
    
            var userCreatorIdParameter = userCreatorId.HasValue ?
                new ObjectParameter("UserCreatorId", userCreatorId) :
                new ObjectParameter("UserCreatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UnitConvertsOperation", actionParameter, idParameter, unitIdParameter, subUnitIdParameter, coefficientParameter, fiscal_Year_IDParameter, effectiveDateStartParameter, effectiveDateEndParameter, userCreatorIdParameter, message);
        }
    
        public virtual ObjectResult<GetVesselsRunningValuesReport_Result> GetVesselsRunningValuesReport(Nullable<long> companyId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVesselsRunningValuesReport_Result>("GetVesselsRunningValuesReport", companyIdParameter, fromDateParameter, toDateParameter);
        }
    }
}
